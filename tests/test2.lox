// ===== comparisons & equality =====
print "== comparisons ==";
print 1 < 2;             // true
print 2 <= 2;            // true
print 3 > 1;             // true
print 3 >= 4;            // false
print 1 == 1;            // true
print 1 != 2;            // true
print "a" == "a";        // true
print "a" != "b";        // true

// ===== booleans, nil, and ! =====
print "== truthiness ==";
print !true;             // false
print !false;            // true
print !nil;              // true
print !!"x";             // true  (any non-nil, non-false is truthy)

// ===== logical and / or short-circuit =====
print "== logic ==";
var x = 0;
fun bump() { x = x + 1; print "bumped"; }
false and bump();        // should NOT call bump()
print x;                 // 0
true or bump();          // should NOT call bump()
print x;                 // 0
true and print "yep";    // prints "yep"
false or print "ok";     // prints "ok"

// ===== strings =====
print "== strings ==";
print "foo" + "bar";     // foobar
print "hi " + "there";   // hi there

// Mixed + should be an error in Lox; comment out if you coerce types.
// print 1 + "x";        // expect runtime error (operands must be two numbers or two strings)

// ===== scope & shadowing =====
print "== scope & shadowing ==";
var a = 10;
{
  var a = 99;
  print a;               // 99 (inner)
}
print a;                 // 10 (outer)

// ===== loops: edge-ish cases =====
print "== loops ==";
// While with body-less for (single statement)
var i = 0;
for ( ; i < 3; i = i + 1) print i;  // 0,1,2

// Nested while
var w = 2;
while (w > 0) {
  var j = 0;
  while (j < 2) {
    print w * 10 + j;    // 20,21 then 10,11
    j = j + 1;
  }
  w = w - 1;
}

// ===== functions calling functions =====
print "== functions ==";
fun twice(n) { print n + n; }
fun thrice(n) { print n + n + n; }
fun demo() { twice(4); thrice(3); }
demo();                  // 8 then 9

// Arity checks (uncomment to validate your error messages):
// print "== arity probes ==";
// twice();              // Expected 1 arguments but got 0.
// thrice(1, 2);        // Expected 1 arguments but got 2.

// Non-callable call (uncomment to verify "Can only call..." path):
// var notAFunction = 123;
// notAFunction();       // runtime error
